#!/usr/bin/env bash
set -o allexport -o errexit -o nounset -o pipefail
# https://www.gnu.org/software/bash/manual/bash.html#The-Set-Builtin

# ====================== TODO =======================

# There is no regex support currently for the REST API, look out if there are changes or
# maybe the GraphQL API gets the ability to search code. Currently only ISSUE, REPOSITORY,
# USER and DISCUSSION are supported.

# Check supported search types in the GraphQL API: gh api graphql --raw-field query=$'{
# __type(name: "SearchType") { enumValues { name } }}' \
# --jq '[.data.__type.enumValues[].name] | join(", ")'

# TODO: add tests

# ====================== set variables =======================

debug_mode=false
open_in_editor=false
open_in_pager=false
fzf_prompt="❮❯ Code: "
BAT_THEME=${BAT_THEME:-Monokai Extended}
# for 'fzf' to work correctly it needs to be set to bash
SHELL=bash
# a cached version will be used and only then a new one will be pulled
gh_default_cache_time="1h"
gh_default_limit=30
gh_user_limit=${gh_user_limit:-$gh_default_limit}
gh_accept_json="Accept: application/vnd.github+json"
gh_accept_raw="Accept: application/vnd.github.raw"
gh_accept_text_match="Accept: application/vnd.github.text-match+json"
gh_rest_api_version="X-GitHub-Api-Version:2022-11-28"
# see https://github.com/junegunn/fzf/blob/master/CHANGELOG.md 'preview-border' option
min_fzf_version="0.41.0"
# TODO: bump version when fixed https://github.com/cli/cli/issues/7674
min_gh_version="2.31.0"

# define colors
COLOR_RESET='\033[0m'
RED_NORMAL='\033[0;31m'
GREEN_NORMAL='\033[0;32m'
YELLOW_NORMAL='\033[0;33m'
MAGENTA_NORMAL="\033[0;35m"
MAGENTA_BOLD="\033[1;35m"
CYAN_NORMAL="\033[0;36m"
CYAN_BOLD="\033[1;36m"
WHITE_BOLD='\033[1;97m'
DARK_GRAY='\033[0;90m'

# create temp files
store_bat_debug=$(mktemp -t bat_debug) || die "Can't create temp file."
store_file_contents=$(mktemp -t file_content) || die "Can't create temp file."
store_fzf_port=$(mktemp -t fzf_port) || die "Can't create temp file."
store_gh_content_debug=$(mktemp -t gh_content_debug) || die "Can't create temp file."
store_gh_search_debug=$(mktemp -t gh_search_debug) || die "Can't create temp file."
declare -a temp_files=(
	"$store_bat_debug"
	"$store_file_contents"
	"$store_fzf_port"
	"$store_gh_content_debug"
	"$store_gh_search_debug"
)

# ===================== basic functions =====================

trap cleanup EXIT SIGHUP SIGINT

cleanup() {
	$debug_mode && printf "%bDebug mode was ON, the following files weren't deleted.%b\n" "$YELLOW_NORMAL" "$COLOR_RESET"
	for file in "${temp_files[@]}"; do
		# Use the 'find' command with a wildcard to retrieve all matching files.
		find "${file}"* 2>/dev/null | while read -r matching_file; do
			# these files aren't much use for debugging and can always be deleted
			if [[ $matching_file == "${store_file_contents}"* ]]; then
				rm -f "$matching_file"
			elif ! $debug_mode || [[ ! -s $matching_file ]]; then
				rm -f "$matching_file"
			else
				printf "\t%s\n" "$matching_file"
			fi
		done
	done
}

die() {
	echo ERROR: "$*" >&2
	exit 1
}

version_num() {
	sed -E 's/^[^0-9]*//' <<<"$@" | awk -F '.' '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'
}

check_version() {
	local user_version tool=$1 min_version=$2
	user_version="$($tool --version | sed q)"
	if [ "$(version_num "$min_version")" -gt "$(version_num "$user_version")" ]; then
		die "The minimum required '$tool' version is $min_version. Your '$tool' version is: $user_version."
	fi
}

# IMPORTANT: Keep it in sync with the readme.md
print_help_text() {
	local help_text
	help_text=$(
		cat <<EOF
GitHub code searching with 'fzf'

${WHITE_BOLD}Usage${COLOR_RESET}
  gh find-code [Flags] [Search query]

${WHITE_BOLD}Flags${COLOR_RESET}
  ${GREEN_NORMAL}-d${COLOR_RESET}  debug mode
  ${GREEN_NORMAL}-l${COLOR_RESET}  limit the number of listed results (default ${gh_default_limit}, max 100)
  ${GREEN_NORMAL}-h${COLOR_RESET}  help

${WHITE_BOLD}Hotkeys${COLOR_RESET}
  ${GREEN_NORMAL}?     ${COLOR_RESET}  help
  ${GREEN_NORMAL};     ${COLOR_RESET}  quick jump
  ${GREEN_NORMAL}ctrl-b${COLOR_RESET}  open the file in the browser
  ${GREEN_NORMAL}ctrl-e${COLOR_RESET}  open the file content in the '\$EDITOR'
  ${GREEN_NORMAL}ctrl-o${COLOR_RESET}  open the search query in the browser
  ${GREEN_NORMAL}ctrl-r${COLOR_RESET}  reload
  ${GREEN_NORMAL}ctrl-u${COLOR_RESET}  clear the query
  ${GREEN_NORMAL}enter ${COLOR_RESET}  open the file in the '\$PAGER'
  ${GREEN_NORMAL}tab   ${COLOR_RESET}  toggle the file preview
  ${GREEN_NORMAL}esc   ${COLOR_RESET}  quit

${WHITE_BOLD}Search query examples${COLOR_RESET}
  ${DARK_GRAY}# searches only in the 'junegunn/fzf' repo for 'FZF_PORT'${COLOR_RESET}
  gh find-code 'repo:junegunn/fzf FZF_PORT'
  ${DARK_GRAY}# find '.rs' files with the string 'Hello, world!'${COLOR_RESET}
  gh find-code 'extension:rs "Hello, world!"'

${DARK_GRAY}# The syntax for searching code is described in the link below.${COLOR_RESET}
${DARK_GRAY}# https://docs.github.com/en/search-github/searching-on-github/searching-code ${COLOR_RESET}
EOF
	)
	echo -e "$help_text"
}

# ====================== parse command-line options =======================

while getopts "dhl:" opt; do
	case ${opt} in
		d)
			fzf_prompt="$(printf "%b❮ 𝙳𝚎𝚋𝚞𝚐 𝙼𝚘𝚍𝚎 ❯ Code: %b" "$YELLOW_NORMAL" "$COLOR_RESET")"
			export GH_DEBUG="api"
			debug_mode="true"
			;;
		l)
			if ((OPTARG < 1 || OPTARG > 100)); then
				die "Value for '-l' must be between 1 and 100"
			fi
			gh_user_limit="${OPTARG}"
			;;
		h)
			print_help_text
			exit 0
			;;
		*) die "Invalid Option: -$OPTARG" ;;
	esac
done
shift "$((OPTIND - 1))"

# ====================== check requirements =======================

for tool in bat curl fzf gh python; do
	if ! type -p $tool >/dev/null; then
		die "'$tool' was not found."
	fi
done

check_version fzf "$min_fzf_version"
check_version gh "$min_gh_version"

# ===================== helper functions ==========================

sanitize_input() {
	if [[ -n ${2-} ]]; then
		# replace spaces with '+' and special characters with percent-encoded values
		python -c "import urllib.parse; print(urllib.parse.quote_plus('''$1'''))"
	else
		# replaces spaces with '%20' and special characters with percent-encoded values
		python -c "import urllib.parse; print(urllib.parse.quote('''$1'''))"
	fi
}

play_notification_sound() {
	# natively installed audio player for macOS, or fall back to the ASCII bell character
	afplay /System/Library/Sounds/Basso.aiff 2>/dev/null || echo -e "\a"
}

open_query_in_browser() {
	local sanitized_query
	sanitized_query=$(sanitize_input "$1" true)
	if [ -n "$sanitized_query" ]; then
		python -m webbrowser "https://github.com/search?q=${sanitized_query}&type=code"
	else
		play_notification_sound
	fi
}

gh_query() {
	local data input="$*"
	local items total_count
	local index owner_repo_name file_name file_path patterns
	local file_extension sanitized_patterns sanitized_owner_repo_name sanitized_file_path
	local matched_line error_encountered
	declare -a line_numbers
	if data=$(gh api search/code \
		--method GET \
		--cache "$gh_default_cache_time" \
		--header "$gh_accept_json" \
		--header "$gh_accept_text_match" \
		--header "$gh_rest_api_version" \
		--field "per_page=$gh_user_limit" \
		--raw-field q="${input}" \
		--jq \
		$'"\(.items|length) \(.total_count)",
		(.items | to_entries[] | {
			owner_repo_name: .value.repository.full_name,
			file_name: .value.name,
			file_path: .value.path,
			index: (.key + 1),
			# create a unique list of patterns separated by a vertical line to use in
			# extended grep
			patterns: ([.value.text_matches[] | .. | .text? | select(type=="string")] as $patterns_array |
				if $patterns_array == [] then "null" else $patterns_array | unique | join("|") end)
		} | [.index, .owner_repo_name, .file_name, .file_path, .patterns] | @tsv)' 2>"$store_gh_search_debug"); then
		{
			error_encountered=false
			# first line
			IFS=' ' read -r items total_count

			# listed items
			while IFS=$'\t' read -r index owner_repo_name file_name file_path patterns; do
				file_extension="null"
				# check if the file does have a file extension and assign it
				[[ $file_name =~ \.[[:alnum:]]+$ ]] && file_extension="${file_name##*.}"
				# covers cases where the filename starts with a dot, for example '.zshrc'
				[[ $file_name == ".${file_extension}" ]] && file_extension="$file_name"

				# strings containing operators like '*' or '+' need to be escaped, but keep the "|"
				# character unescaped
				sanitized_patterns=$(printf '%q\n' "$patterns" | sed 's/\\\|/|/g')

				# these sanitizations are necessary because it is possible that file paths can contain
				# special characters, e.g. hashtags (#)
				sanitized_owner_repo_name=$(sanitize_input "$owner_repo_name")
				sanitized_file_path=$(sanitize_input "$file_path")
				cp "$store_file_contents" "${store_file_contents}_${index}"
				cp "$store_file_contents" "${store_file_contents}_${index}_line_numbers"

				curl --silent \
					--request POST "localhost:$(cat "$store_fzf_port")" \
					--data "transform-header:printf '%b%s of %s collected...%b' '$DARK_GRAY' \
					'$index' '$((total_count > gh_user_limit ? gh_user_limit : total_count))' '$COLOR_RESET'"

				# TODO: fix symlink issue - gh find-code -d 'size:<10 zsh repo:karma0/zsh'
				gh api "repos/${sanitized_owner_repo_name}/contents/${sanitized_file_path}" \
					--cache "$gh_default_cache_time" \
					--header "$gh_accept_raw" \
					--header "$gh_rest_api_version" \
					>"${store_file_contents}_${index}" \
					2>"$store_gh_content_debug" || {
					error_encountered=true
					break
				}

				line_numbers=()
				[[ $patterns != "null" ]] && while IFS='' read -r matched_line; do
					line_numbers+=("$matched_line")
				done < <(grep --extended-regexp --line-number "$sanitized_patterns" "${store_file_contents}_${index}" | cut -d: -f1)

				echo "${line_numbers[*]}" >"${store_file_contents}_${index}_line_numbers"
				printf "%s  %s  %-3d  %b%s%b/%b%s%b  %b%s/%b%s%b\n" \
					"${line_numbers:-1}" "$file_extension" "$index" "$CYAN_NORMAL" "${owner_repo_name%/*}" "$COLOR_RESET" \
					"$CYAN_BOLD" "${owner_repo_name#*/}" "$COLOR_RESET" "$MAGENTA_NORMAL" "$(dirname "$file_path")" \
					"$MAGENTA_BOLD" "$(basename "$file_path")" "$COLOR_RESET"
			done

			if $error_encountered; then
				{
					printf "\n%bList API limits:%b\n" "$RED_NORMAL" "$COLOR_RESET"
					gh api rate_limit --jq $'paths(scalars) as $p | [($p|join(".")), (getpath($p)|tostring)] | @tsv' | column -ts $'\t'
				} >>"$store_gh_content_debug"
				curl --silent \
					--request POST "localhost:$(cat "$store_fzf_port")" \
					--data "transform-header(printf '%bAPI failed for repos/%s/contents/%s%b' \
					'$RED_NORMAL' '$owner_repo_name' '$file_path' '$COLOR_RESET')+change-preview:cat '$store_gh_content_debug'"
			else
				curl --silent \
					--request POST "localhost:$(cat "$store_fzf_port")" \
					--data "transform-header:printf '%b%s of ∑ %s%b | ? help · esc quit%b\n' \
					'$YELLOW_NORMAL' '$items' '$total_count' '$DARK_GRAY' '$COLOR_RESET'"
			fi

		} < <(echo "$data")

	else
		if [ -z "$input" ]; then
			curl --silent \
				--request POST "localhost:$(cat "$store_fzf_port")" \
				--data "transform-header:printf '%bPlease enter a search query.%b' '$DARK_GRAY' '$COLOR_RESET'"
		else
			curl --silent \
				--request POST "localhost:$(cat "$store_fzf_port")" \
				--data "transform-header:printf '%bFailed to get the search results, check the query syntax.%b' \
				'$RED_NORMAL' '$COLOR_RESET'"
			return 0
		fi
	fi

}

view_contents() {
	declare -a line_numbers bat_args editor_args less_args
	local file_extension index _ file_path
	local file_name tempfile_with_ext less_move_to_line
	IFS=$'\t' read -r _ file_extension index _ file_path < <(sed -E $'s/[[:space:]]{2,}/\t/g' <<<"$@")

	# '--wrap never' seems to be needed without it the fzf preview occasionally would move
	# to the wrong line; '--theme' not needed because of 'BAT_THEME' set at the top
	bat_args=(
		$'--terminal-width ${FZF_PREVIEW_COLUMNS:-$COLUMNS}'
		"--wrap never"
		"--style numbers,header-filename,grid"
		"--color always"
	)

	[[ $file_extension != "null" ]] && if bat --language "$file_extension" <<<"test" >/dev/null 2>&1; then
		bat_args+=("--language $file_extension")
	fi
	IFS=' ' read -ra line_numbers <"${store_file_contents}_${index}_line_numbers"

	# NOTE: in 'bat', '--line-range' overwrites prior flags, thus makes it inadequate for
	# our use case but '--highlight-line' can be used multiple times, would be handy if
	# the preview would only show relevant code with a bit of context around each match
	# https://github.com/sharkdp/bat/pull/162#pullrequestreview-125072252
	for number in "${line_numbers[@]}"; do
		bat_args+=("--highlight-line $number")
	done
	file_name=$(basename "$file_path")

	# replace single quotes with escaped back ticks
	# a file_name may start with a dash (-), don't leave a space between '--file-name' and the argument
	bat_args+=("--file-name='${file_name//"'"/\`} │ 🅻  ${line_numbers[*]:-<none>}'")

	if $open_in_editor && [[ -n $EDITOR ]]; then
		tempfile_with_ext="${store_file_contents}_${index}_${file_name}"
		cp "${store_file_contents}_${index}" "$tempfile_with_ext"
		case $(basename "$EDITOR") in
			code | codium)
				editor_args=(--reuse-window --goto "${tempfile_with_ext}:${line_numbers:-1}")
				;;
			nano | nvim | vi | vim)
				editor_args=("+${line_numbers:-1}" "$tempfile_with_ext")
				;;
			*)
				play_notification_sound
				return 0
				;;
		esac
		$EDITOR "${editor_args[@]}"
		return 0
	fi

	if $debug_mode; then
		{
			echo -n "bat version: "
			bat --version
			echo -n "config file: "
			bat --config-file
			cat "$(bat --config-file)"
			for value in "BAT_PAGER" "BAT_CONFIG_PATH" "BAT_STYLE" "BAT_THEME" "BAT_TABS" "PAGER"; do
				echo "$value = '${!value}'"
			done
		} >"$store_bat_debug" 2>&1
	fi

	if $open_in_pager; then
		bat_args+=("--paging always")
		# the 'less' pager can move to a specific line
		if [[ $(basename "$PAGER") =~ ^(bat|less)$ ]]; then
			# if the user asssigned the environment variable LESS with the
			# '-F/--quit-if-one-screen' option, and set the '--pager' explicitly to 'less'
			# the screen won't remain open for small text files that fit on the entire
			# screen. The simplest solution is to unset the  'LESS' variable and define my
			# own settings
			[[ -n $LESS ]] && unset LESS
			# account for an offset of 3 lines for the bat header
			less_move_to_line=$((${line_numbers:-1} + 3))
			less_args=(
				"--LONG-PROMPT"         # Long prompts ("Line X of Y")
				"--hilite-search"       # Highlight results when searching with slash key (/)
				"--jump-target=.3"      # percent on the screen for the target line
				"--quiet"               # be more quiet
				"--quit-on-intr"        # quit less immediately with ^C
				"--RAW-CONTROL-CHARS"   # colors will not work without it
				"--tilde"               # don't show '~' symbols on lines after EOF
				"+${less_move_to_line}" # as the variable name suggests
			)
			if [[ "$(version_num "$(less --version | sed q)")" -ge 550 ]]; then
				# https://www.greenwoodsoftware.com/less/old.html
				# mouse input came with version 550
				less_args+=("--mouse")
			fi
			# https://github.com/sharkdp/bat#using-a-different-pager
			bat_args+=("--pager 'less ${less_args[*]}'")
		fi
	fi

	eval bat "${bat_args[*]}" "${store_file_contents}_${index}"
}
# ===================== lets begin ========================

gh_query "$*" | fzf \
	--ansi \
	--bind $'start:execute-silent:echo $FZF_PORT > $store_fzf_port' \
	--bind "change:first+reload:sleep 0.75; gh_query {q}" \
	--bind 'ctrl-b:execute-silent:gh browse --repo {4} {5}:{1}' \
	--bind 'ctrl-e:execute:[[ -n {q} && -n {} ]] && open_in_editor=true view_contents {}' \
	--bind 'ctrl-o:execute-silent:open_query_in_browser {q}' \
	--bind 'ctrl-r:reload:gh_query {q}' \
	--bind 'ctrl-u:clear-query' \
	--bind 'enter:execute:[[ -n {q} && -n {} ]] && open_in_pager=true view_contents {}' \
	--bind "esc:become:" \
	--bind '?:change-preview(print_help_text)+change-preview-window:+1' \
	--bind ';:jump' \
	--bind 'load:change-preview([[ -n {q} && -n {} ]] && view_contents {})+change-preview-window:+{1}+3/3' \
	--bind 'tab:toggle-preview+change-preview-window(hidden|nohidden:+{1}+3/3)+change-preview:[[ -n {q} && -n {} ]] && view_contents {}' \
	--border block \
	--color 'bg+:233,bg:235,gutter:235,border:238,scrollbar:235' \
	--color 'preview-bg:234,preview-border:236,preview-scrollbar:237' \
	--color 'fg+:255,fg:regular:250,hl:40,hl+:40' \
	--color 'pointer:9,spinner:92,marker:46' \
	--color 'prompt:14,info:40,header:255:regular,label:bold' \
	--delimiter '\s\s+' \
	--disabled \
	--ellipsis '' \
	--height=100% \
	--header-lines 0 \
	--info hidden \
	--jump-labels 'abcdefghijklmnopqrstuvwxyz' \
	--layout reverse \
	--listen \
	--no-multi \
	--pointer '▶' \
	--preview "[[ -n {q} && -n {} ]] && view_contents {}" \
	--preview-window 'border-block:~3:+{1}+3/3:nohidden:right:nowrap:65%:<70(bottom:75%)' \
	--prompt "$fzf_prompt" \
	--query "$*" \
	--scrollbar '│▐' \
	--separator '' \
	--with-nth=3..
