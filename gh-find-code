#!/usr/bin/env bash
set -o allexport -o errexit -o nounset -o pipefail
# https://www.gnu.org/software/bash/manual/bash.html#The-Set-Builtin

# ====================== TODO =======================

# There is no regex support currently for the REST API, look out if there are changes or
# maybe the GraphQL API gets the ability to search code. Currently only ISSUE, REPOSITORY,
# USER and DISCUSSION are supported.

# Check supported search types in the GraphQL API: gh api graphql --raw-field query=$'{
# __type(name: "SearchType") { enumValues { name } }}' \
# --jq '[.data.__type.enumValues[].name] | join(", ")'

# TODO: add tests
# TODO: replace python with a more typical bash solution
# TODO: Investigate the cause of the experienced output from a background job after exiting from 'fzf'
# ====================== set variables =======================

# define colors
COLOR_RESET='\033[0m'
RED_NORMAL='\033[0;31m'
GREEN_NORMAL='\033[0;32m'
YELLOW_NORMAL='\033[0;33m'
MAGENTA_NORMAL="\033[0;35m"
MAGENTA_BOLD="\033[1;35m"
CYAN_NORMAL="\033[0;36m"
CYAN_BOLD="\033[1;36m"
CYAN_INVERT="\033[7;36m"
WHITE_NORMAL='\033[0;97m'
WHITE_BOLD='\033[1;97m'
DARK_GRAY='\033[0;90m'

debug_mode=false
open_in_editor=false
open_in_pager=false
fzf_prompt="$(printf "%b❮❯ Code: %b" "$CYAN_NORMAL" "$COLOR_RESET")"
fzf_prompt_fuzzy="$(printf "%b➤ Fuzzy:%b " "$CYAN_INVERT" "$COLOR_RESET")"

FZF_API_KEY="$(command head -c 32 /dev/urandom | command base64)"
BAT_THEME=${BAT_THEME:-Monokai Extended}
# Bash is required to use exported functions when the default shell is not bash.
SHELL=$(which bash)
# Used for the '--history' flag in fzf to store my commands and retrieve them when needed.
gh_find_code_history="${BASH_SOURCE%/*}/gh_find_code_history.txt"
# A cached version will be used before a new one is pulled.
gh_default_cache_time="1h"
gh_default_limit=30
gh_user_limit=${gh_user_limit:-$gh_default_limit}
gh_accept_json="Accept: application/vnd.github+json"
gh_accept_raw="Accept: application/vnd.github.raw"
gh_accept_text_match="Accept: application/vnd.github.text-match+json"
gh_rest_api_version="X-GitHub-Api-Version:2022-11-28"
# using 'FZF_PROMPT' https://github.com/junegunn/fzf/blob/master/CHANGELOG.md
min_fzf_version="0.46.0"
# a bug with 'gh-browse' with relative paths was fixed
# https://github.com/cli/cli/issues/7674
min_gh_version="2.37.0"
# requires 'urllib.parse'
# https://docs.python.org/3/library/urllib.parse.html
min_python_version="3.0.0"

# =========================== basics ============================

cleanup() {
	$debug_mode && printf "%bDebug mode was ON, the following files weren't deleted.%b\n" "$YELLOW_NORMAL" "$COLOR_RESET"
	if [ -s "$store_ppid" ]; then
		while read -r ppid; do
			if command kill -0 "$ppid" 2>/dev/null; then
				command kill "$ppid" 2>/dev/null
			fi
		done <"$store_ppid"
	fi
	if [ -s "$store_pids" ]; then
		command awk '!x[$0]++' "$store_pids" | while read -r pid; do
			if command kill -0 "$pid" 2>/dev/null; then
				command kill "$pid" 2>/dev/null
			fi
		done
		: >"$store_pids"
	fi
	command rm -rf "$scratch_directory" 2>/dev/null
	if ! $debug_mode; then
		command rm -rf "$debug_directory" 2>/dev/null
	else
		find "$debug_directory" -mindepth 1 2>/dev/null | while read -r matching_file; do
			if [[ ! -s $matching_file ]]; then
				command rm -f "$matching_file"
			else
				command printf "\t%s\n" "$matching_file"
			fi
		done
	fi

	# In case of duplicates, only the most recent entry is preserved. Instead of 'tail -r', 'tac'
	# can be used, but it requires 'coreutils'.
	[[ -f $gh_find_code_history ]] && command tail -r "$gh_find_code_history" |
		command awk '!x[$0]++' | command tail -r | command tee "$gh_find_code_history" >/dev/null
}

die() {
	echo ERROR: "$*" >&2
	exit 1
}

trap cleanup EXIT SIGHUP SIGINT

# Creating temporary files. The current setup works but is very verbose. An attempt to use
# associative arrays with 'declare -A' was unsuccessful as I couldn't access the associated
# filename in child processes.

date_prefix=$(date -u +%Y-%m-%dT%H-%M-%S)
# Default directory for trivial files
scratch_directory=$(mktemp -dt "$date_prefix.gh_find_code") || die "Can't create directory."
store_input_list="${scratch_directory}/input_list"
store_tee_append="${scratch_directory}/tee_append"
store_fzf_port="${scratch_directory}/fzf_port"
store_file_contents="${scratch_directory}/file_content"
store_skip_count="${scratch_directory}/skip_count"
store_history_counter="${scratch_directory}/history_counter"
store_ppid="${scratch_directory}/ppid"
store_pids="${scratch_directory}/pids"
store_fuzzy_search_string="${scratch_directory}/fuzzy_search_string"
store_search_string="${scratch_directory}/search_string"

# Debug directory
debug_directory=$(mktemp -dt "$date_prefix.gh_find_code.debug") || die "Can't create debug directory."
store_bat_debug="${debug_directory}/bat_debug"
store_grep_extended_debug="${debug_directory}/grep_extended_debug"
store_gh_search_debug="${debug_directory}/gh_search_debug"
store_gh_content_debug="${debug_directory}/gh_content_debug"

# This function validates the version of a tool.
check_version() {
	local tool=$1 threshold=$2 on_error=${3:-die}
	local user_version
	declare -a ver_parts threshold_parts
	user_version=$(command $tool --version 2>&1 |
		command grep --color=never --extended-regexp --only-matching --regexp='[0-9]+(\.[0-9]+)*' |
		command sed q)

	IFS='.' read -ra ver_parts <<<"$user_version"
	IFS='.' read -ra threshold_parts <<<"$threshold"

	for i in "${!ver_parts[@]}"; do
		if (("${ver_parts[i]}" < "${threshold_parts[i]}")); then
			$on_error "Your '$tool' version '$user_version' is insufficient. The minimum required version is '$threshold'."
		fi
	done
}

# IMPORTANT: Keep it in sync with the readme.md
print_help_text() {
	local help_text
	help_text=$(
		cat <<EOF
GitHub code searching with 'fzf'

${WHITE_BOLD}Usage${COLOR_RESET}
  gh find-code [Flags] [Search query]

${WHITE_BOLD}Flags${COLOR_RESET}
  ${GREEN_NORMAL}-d${COLOR_RESET}  debug mode, primarily used for identifying and resolving bugs
  ${GREEN_NORMAL}-l${COLOR_RESET}  limit the number of listed results (default ${gh_default_limit}, max 100)
  ${GREEN_NORMAL}-h${COLOR_RESET}  help

${WHITE_BOLD}Hotkeys${COLOR_RESET}
  ${GREEN_NORMAL}?     ${COLOR_RESET}  help
  ${GREEN_NORMAL}ctrl-b${COLOR_RESET}  open the file in the browser
  ${GREEN_NORMAL}ctrl-h${COLOR_RESET}  display the history commands
  ${GREEN_NORMAL}ctrl-n${COLOR_RESET}  next history command
  ${GREEN_NORMAL}ctrl-o${COLOR_RESET}  open the file content in the editor
  ${GREEN_NORMAL}ctrl-p${COLOR_RESET}  previous history command
  ${GREEN_NORMAL}ctrl-r${COLOR_RESET}  reload with up to 100 results
  ${GREEN_NORMAL}ctrl-t${COLOR_RESET}  toggle between Code and Fuzzy search
  ${GREEN_NORMAL}ctrl-x${COLOR_RESET}  open the search query in the browser
  ${GREEN_NORMAL}enter ${COLOR_RESET}  open the file in the pager
  ${GREEN_NORMAL}tab   ${COLOR_RESET}  toggle the file preview
  ${GREEN_NORMAL}esc   ${COLOR_RESET}  quit

${WHITE_BOLD}Search query examples${COLOR_RESET}
  ${DARK_GRAY}# searches only in the 'junegunn/fzf' repo for 'FZF_PORT'${COLOR_RESET}
  gh find-code 'repo:junegunn/fzf FZF_PORT'
  ${DARK_GRAY}# find '.rs' files with the string 'Hello, world!'${COLOR_RESET}
  gh find-code 'extension:rs "Hello, world!"'

${DARK_GRAY}# The syntax for searching code is described in the link below.${COLOR_RESET}
${DARK_GRAY}# https://docs.github.com/en/search-github/searching-on-github/searching-code ${COLOR_RESET}
EOF
	)
	echo -e "$help_text"
}

# ====================== parse command-line options =======================

while getopts "dhl:" opt; do
	case ${opt} in
		d)
			fzf_prompt="$(printf "%b❮ 𝙳𝚎𝚋𝚞𝚐 𝙼𝚘𝚍𝚎 ❯ Code: %b" "$YELLOW_NORMAL" "$COLOR_RESET")"
			export GH_DEBUG="api"
			debug_mode="true"
			;;
		l)
			if ((OPTARG < 1 || OPTARG > 100)); then
				die "Value for '-l' must be between 1 and 100"
			fi
			gh_user_limit="${OPTARG}"
			;;
		h)
			print_help_text
			exit 0
			;;
		*) die "Invalid Option: -$OPTARG" ;;
	esac
done
shift "$((OPTIND - 1))"

# ====================== check requirements =======================

for tool in bat column curl fzf gh python; do
	if ! command -v $tool >/dev/null; then
		die "'$tool' was not found."
	fi
done

check_version fzf "$min_fzf_version"
check_version gh "$min_gh_version"
check_version python "$min_python_version"

# Verify if there are at least two spaces between columns. The delimiter in 'fzf' is set to
# '\t' or '\s\s+' to separate fields. By default, the 'column' command should separate any
# columns with two spaces. If this is not the case, you cannot proceed. It appears that
# older versions, e.g. BSD 1997, of 'column' had a default of two spaces.
# https://github.com/freebsd/freebsd-src/blob/0da30e9aa/usr.bin/column/column.c#L245
# Newer versions allow the output-separator to be defined.
# https://github.com/util-linux/util-linux/commit/47bd8ddc
# https://github.com/util-linux/util-linux/issues/1699#issuecomment-1140972918
# https://man7.org/linux/man-pages/man1/column.1.html

if [[ $(command column -t <<<"A Z" 2>/dev/null) != *"  "* ]]; then
	die "Your 'column' command does not separate columns with at least two spaces. Please report this issue, stating your operating system and 'column' version."
fi

# ===================== helper functions ==========================

# send a POST request to fzf
curl_custom() {
	command curl --header "x-api-key: $FZF_API_KEY" \
		--request POST "localhost:$(cat "$store_fzf_port")" \
		--silent --data "${@:?"Missing 'data' input!"}"
}

sanitize_input() {
	if [[ -n ${2-} ]]; then
		# replace spaces with '+' and special characters with percent-encoded values
		command python -c "import urllib.parse; print(urllib.parse.quote_plus('''$1'''))"
	else
		# replaces spaces with '%20' and special characters with percent-encoded values
		command python -c "import urllib.parse; print(urllib.parse.quote('''$1'''))"
	fi
}

play_notification_sound() {
	# natively installed audio player for macOS, or fall back to the ASCII bell character
	command afplay /System/Library/Sounds/Basso.aiff 2>/dev/null || echo -e "\a"
}

open_query_in_browser() {
	local sanitized_query
	sanitized_query=$(sanitize_input "$1" true)
	if [ -n "$sanitized_query" ]; then
		command python -m webbrowser "https://github.com/search?q=${sanitized_query}&type=code"
	else
		play_notification_sound
	fi
}

gh_query() {
	local data input="$*"
	local items total_count skip_count
	local index owner_repo_name file_name file_path patterns
	local file_extension sanitized_patterns sanitized_owner_repo_name sanitized_file_path
	local matched_line error_encountered redirect_location index_color
	local base_name dir_name
	declare -a line_numbers
	if [ -z "$input" ]; then
		curl_custom "transform-header:printf '%b? help · esc quit\nPlease enter a search query.%b' '$DARK_GRAY' '$COLOR_RESET'"
		return
	fi
	# Ensure all background jobs are terminated before starting a new one.
	if [ -s "$store_pids" ]; then
		command awk '!x[$0]++' "$store_pids" | while read -r pid; do
			if command kill -0 "$pid" 2>/dev/null; then
				command kill "$pid" 2>/dev/null
			fi
		done
		: >"$store_pids"
	fi
	curl_custom "transform-header:printf '%bSearching…%b' '$DARK_GRAY' '$COLOR_RESET'"
	if ! data=$(command gh api search/code \
		--method GET \
		--cache "$gh_default_cache_time" \
		--header "$gh_accept_json" \
		--header "$gh_accept_text_match" \
		--header "$gh_rest_api_version" \
		--field "per_page=$gh_user_limit" \
		--raw-field q="${input}" \
		--jq \
		$'"\(.items|length) \(.total_count)",
		(.items | to_entries[] | {
			owner_repo_name: .value.repository.full_name,
			file_name: .value.name,
			file_path: .value.path,
			index: (.key + 1),
			# create a unique list of patterns separated by a vertical line to use in
			# extended grep
			patterns: ([.value.text_matches[] | .. | .text? | select(type=="string")] as $patterns_array |
				if $patterns_array == [] then "__NoPatternFound__" else $patterns_array | unique | join("|") end)
		} | [.index, .owner_repo_name, .file_name, .file_path, .patterns] | @tsv)' \
		2>"$store_gh_search_debug") || [[ -z $data ]]; then
		curl_custom "transform-header:printf '%bFailed to get the search results!\n\t- Check query syntax\n\t- Check internet connection%b' \
				'$RED_NORMAL' '$COLOR_RESET'"
		return
	else
		({
			# first line
			IFS=' ' read -r items total_count

			while IFS=$'\t' read -r index owner_repo_name file_name file_path patterns; do
				# https://github.com/junegunn/fzf/issues/398
				# Tested with 'sudo opensnoop -n bash', without a break check it keeps going through
				# the data list. Check if the parent process is still running or kill the loop
				! command kill -0 "$PPID" 2>/dev/null && break
				# These sanitizations are necessary because file paths may contain special
				# characters, such as hashtags (#).
				sanitized_owner_repo_name=$(sanitize_input "$owner_repo_name")
				sanitized_file_path=$(sanitize_input "$file_path")
				command cp "$store_file_contents" "${store_file_contents}_${index}"
				command cp "$store_file_contents" "${store_file_contents}_${index}_line_numbers"
				(
					if command gh api "repos/${sanitized_owner_repo_name}/contents/${sanitized_file_path}" \
						--cache "$gh_default_cache_time" \
						--header "$gh_accept_raw" \
						--header "$gh_rest_api_version" \
						>"${store_file_contents}_${index}" \
						2>"$store_gh_content_debug"; then
						:
					elif command gh api "https://raw.githubusercontent.com/${sanitized_owner_repo_name}/HEAD/${sanitized_file_path}" \
						--cache "$gh_default_cache_time" \
						--header "$gh_accept_raw" \
						--header "$gh_rest_api_version" \
						>"${store_file_contents}_${index}" \
						2>"$store_gh_content_debug"; then
						:
					fi
				) &
				# save process ID of the most recently invoked background job
				echo $! >>"$store_pids"
			done
		} <<<"$data") &
		echo $! >>"$store_pids"
		{
			error_encountered=false
			skip_count=0
			redirect_location="/dev/null"
			# Ensure the file is empty before initiating the loop, as it appends the
			# input list to the file throughout the loop.
			: >"$store_tee_append"
			: >"$store_skip_count"
			# first line
			IFS=' ' read -r items total_count
			# listed items
			while IFS=$'\t' read -r index owner_repo_name file_name file_path patterns; do
				! command kill -0 "$PPID" 2>/dev/null && break
				index_color="$WHITE_NORMAL"
				file_extension="null"
				# Check if the file has a file extension and assign it.
				if [[ $file_name =~ \.[[:alnum:]]+$ ]]; then
					file_extension="${file_name##*.}"
				fi
				# This covers special cases where syntax highlighting requires a leading
				# dot, such as filenames like 'zshrc', '.zshrc' or 'macos.zshrc'
				if command bat --list-languages --color=never |
					command grep --quiet --word-regexp "\.${file_extension}"; then
					file_extension=".${file_extension}"
				elif command bat --list-languages --color=never |
					command grep --quiet --word-regexp "\.${file_name}"; then
					file_extension=".${file_name}"
				fi

				# Escape special charters before using the string in extended 'grep'.
				# However, the "|" character should be left unescaped.
				sanitized_patterns=$(command sed -e 's/[][?*+.\/$^(){}]/\\&/g' <<<"$patterns")
				SECONDS=0
				while :; do
					! command kill -0 "$PPID" 2>/dev/null && break
					if [ -s "${store_file_contents}_${index}" ]; then
						cp "${store_file_contents}_${index}" "${store_file_contents}_${index}_fetched"
						: >"${store_file_contents}_${index}"
						break
					fi
					command sleep 0.1
					if ((SECONDS >= 2)); then
						# There could be several reasons why pulling content might fail. One
						# reason could be outdated cached search results from GitHub. For
						# example, a user might have deleted their account, but their content
						# is still in the search index.
						echo "$index" >>"$store_skip_count"
						if $debug_mode; then
							error_encountered=true
						else
							{
								command cat "$store_gh_content_debug"
								printf "\n[%s] SKIPPED: The contents of this file couldn't be fetched.\n\n" "$(date -u +%Y-%m-%dT%H-%M-%S)"
							} >>"${store_file_contents}_${index}"
						fi
						index_color="$RED_NORMAL"
						patterns="__NoPatternFound__"
						break
					fi
				done
				if command grep --quiet --word-regexp "$index" "$store_skip_count"; then
					continue
				fi
				curl_custom "transform-header:printf '%b%s/%s of %s collected...%b' '$DARK_GRAY' \
					'$index' '$((total_count > gh_user_limit ? gh_user_limit : total_count))' \
					'$total_count' '$COLOR_RESET'"

				if $debug_mode; then
					redirect_location="${store_grep_extended_debug}_${index}"
				fi

				line_numbers=()
				[[ $patterns != "__NoPatternFound__" ]] && while IFS='' read -r matched_line; do
					# Ensure only valid numbers are included
					if [[ $matched_line =~ ^[0-9]+ ]]; then
						line_numbers+=("$matched_line")
					else
						{
							echo "The matched line is not a number."
							echo "matched_line: '$matched_line'"
						} >>"${store_grep_extended_debug}_${index}"
					fi
					# Use the '--text' flag, as grep will simply print 'Binary file … matches' if
					# the file contains binary characters. It won't even throw an error.
					# https://unix.stackexchange.com/questions/19907
					# I compared the performance of grep and rg, finding grep to be slightly faster,
					# even with large files (~2000 lines). I may need to investigate further, but
					# for now, I'm opting to use grep.
				done < <(command grep --color=never --line-number --text \
					--extended-regexp --regexp="$sanitized_patterns" -- \
					"${store_file_contents}_${index}_fetched" 2>"${redirect_location}" | cut -d: -f1)
				# Save additional information only if an error is encountered by grep
				if $debug_mode && [[ -s ${store_grep_extended_debug}_${index} ]]; then
					{
						for value in "index" "owner_repo_name" "file_path" "patterns" "sanitized_patterns"; do
							echo "$value = '${!value}'"
						done
					} >>"${store_grep_extended_debug}_${index}" 2>&1
				fi

				echo "${line_numbers[*]}" >"${store_file_contents}_${index}_line_numbers"
				# In cases where a file path is excessively long, basename /dirname might error out
				# and return nothing. Truncate the length to the first/last 30 chars or so.
				# Exemplary command: gh find-code 'repo:Killua-22/LeetCode filename:atoi.c'
				# https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
				# TODO: This will disrupt the ctrl-b command. To resolve this, one could store the
				# filepath in a separate file to allow 'gh browse …' to open it properly. This is a
				# very specific edge case and may not require immediate attention.
				if dirname "$file_path" &>/dev/null; then
					dir_name=$(dirname "$file_path")
				else
					dir_name="${file_path:0:30}…"
				fi
				if basename "$file_path" &>/dev/null; then
					base_name=$(basename "$file_path")
				else
					base_name="…${file_path: -30}"
				fi
				printf "%s\t%s\t%b%-3d%b\t%b%s%b/%b%s%b\t%b%s/%b%s%b\n" \
					"${line_numbers:-1}" "$file_extension" "$index_color" "$index" "$COLOR_RESET" \
					"$CYAN_NORMAL" "${owner_repo_name%/*}" "$COLOR_RESET" "$CYAN_BOLD" \
					"${owner_repo_name#*/}" "$COLOR_RESET" "$MAGENTA_NORMAL" "$dir_name" \
					"$MAGENTA_BOLD" "$base_name" "$COLOR_RESET" |
					command tee -a "$store_tee_append"

				if $error_encountered; then
					break
				fi
			done
			# Format the input list into a structured table.
			command column -ts $'\t' <"$store_tee_append" >"$store_input_list"
			skip_count="$(sed -n '$=' "$store_skip_count")"

			if $error_encountered; then
				{
					echo
					command gh api rate_limit \
						--header "$gh_accept_json" \
						--header "$gh_rest_api_version" \
						--jq \
						'(["List API Limits", "Used/Limit", "Resetting"] | (., map(length*"¯"))),
						(.resources | to_entries[] | {
							name: .key,
							used_limit: "\(.value.used)/\(.value.limit)",
							reset: "\(.value.reset | strflocaltime("%H:%M:%S %Z") ) (\((.value.reset - now) | (./60|ceil))m)"
						}  | [.name, .used_limit, .reset]) | @tsv' |
						command column -ts $'\t' |
						command bat --color=always --plain --language COMMIT_EDITMSG
				} >>"$store_gh_content_debug"
				curl_custom "transform-header(printf '%bAPI failed for repos/%s/contents/%s%b' \
					'$RED_NORMAL' '$owner_repo_name' '$file_path' '$COLOR_RESET')+change-preview:cat '$store_gh_content_debug'"
			elif ((skip_count > 0)); then
				curl_custom "reload(cat $store_input_list)+transform-header:printf '%b%s of ∑ %s%b (Skipped: %d %s [%s])%b | ? help · esc quit%b\n' \
					'$GREEN_NORMAL' '$items' '$total_count' '$RED_NORMAL' '$skip_count' \
					'$([[ $skip_count -gt 1 ]] && echo items || echo item)' \
					'$(paste -sd "," "$store_skip_count")' '$DARK_GRAY' '$COLOR_RESET'"
			else
				curl_custom "reload(cat $store_input_list)+transform-header:printf '%b%s of ∑ %s%b | ? help · esc quit%b\n' \
					'$GREEN_NORMAL' '$items' '$total_count' '$DARK_GRAY' '$COLOR_RESET'"
			fi

		} <<<"$data"
		return
	fi
}

view_contents() {
	declare -a line_numbers bat_args editor_args less_args
	local file_extension index file_path
	local file_name tempfile_with_ext less_move_to_line
	IFS=$'\t' read -r _ file_extension index _ file_path < <(sed -E $'s/[[:space:]]{2,}/\t/g' <<<"$@")
	# Remove trailing whitespace that was caused by the '%-3d' placeholder in 'printf'.
	index=$(tr -d '[:space:]' <<<"$index")

	# The '--wrap never' option is necessary as, without it, the 'fzf' preview may
	# occasionally navigate to the incorrect line. The '--theme' option is not required
	# due to the 'BAT_THEME' set at the beginning.
	bat_args=(
		"--wrap=never"
		"--style=numbers,header-filename,grid"
		"--color=always"
	)

	[[ $file_extension != "null" ]] && if command bat --language "$file_extension" <<<"test" >/dev/null 2>&1; then
		bat_args+=("--language=${file_extension}")
	fi
	IFS=' ' read -ra line_numbers <"${store_file_contents}_${index}_line_numbers"

	# NOTE: The '--line-range' in 'bat' overrides preceding flags. However, the
	# '--highlight-line' attribute can be  utilized multiple times.
	# https://github.com/sharkdp/bat/pull/162#pullrequestreview-125072252
	for number in "${line_numbers[@]}"; do
		bat_args+=("--highlight-line=${number}")
	done
	file_name=$(basename "$file_path")

	# Replace single quotes with escaped back ticks. A file_name might start with a dash
	# (-). Ensure there is no space between '--file-name' and the argument.
	bat_args+=("--file-name='${file_name//"'"/\`} │ 🅻  ${line_numbers[*]:-<none>}'")

	if $open_in_editor; then
		tempfile_with_ext="${store_file_contents}_${index}_${file_name}"
		cp "${store_file_contents}_${index}_fetched" "$tempfile_with_ext"
		case $(basename "${EDITOR-}") in
			code | codium)
				editor_args=(--reuse-window --goto "${tempfile_with_ext}:${line_numbers:-1}")
				;;
			nano | nvim | vi | vim)
				editor_args=("+${line_numbers:-1}" "$tempfile_with_ext")
				;;
			*)
				play_notification_sound
				return 0
				;;
		esac
		$EDITOR "${editor_args[@]}"
		return 0
	fi

	if $debug_mode; then
		{
			echo -n "bat version: "
			command bat --version
			echo -n "config file: "
			command bat --config-file
			command cat "$(command bat --config-file)"
			for value in BAT_PAGER BAT_CONFIG_PATH BAT_STYLE BAT_THEME BAT_TABS PAGER; do
				echo "$value = '${!value}'"
			done
		} >"$store_bat_debug" 2>&1
	fi

	if $open_in_pager; then
		bat_args+=("--paging=always")
		# The 'less' pager can move to a specific line.
		if [[ $(basename "${PAGER-}") =~ ^(bat|less)$ ]]; then
			# The long option (--+…) for resetting the option to its default setting is broken in
			# less version 643, so only use the short version.
			# Ref: https://github.com/gwsw/less/issues/452
			less_move_to_line=$((${line_numbers:-1} + 3))
			less_args=(
				"--clear-screen"        # to be painted from the top line down
				"--RAW-CONTROL-CHARS"   # Raw color codes in output (don't remove color codes)
				"-+F"                   # reset exiting if the entire file can be displayed on the first screen
				"-+X"                   # reset screen clearing prevention
				"+${less_move_to_line}" # as the variable name suggests
			)
			# https://github.com/sharkdp/bat#using-a-different-pager
			bat_args+=("--pager='less ${less_args[*]}'")
		fi
	else
		# Not needed in the pager, as these environment variables aren't expanded there.
		bat_args+=("--terminal-width=${FZF_PREVIEW_COLUMNS:-$COLUMNS}")
	fi
	eval command bat "${bat_args[*]}" "${store_file_contents}_${index}_fetched"
}

get_history_count() {
	if [ ! -s "$store_history_counter" ]; then
		# Initialization is set to zero to prevent any highlighting. Highlighting only starts when
		# 'ctrl-p' or 'ctrl-n' are pressed and are within the range of 1 and the total line count of
		# the gh_find_code_history.txt file.
		echo 0
	else
		command cat "$store_history_counter"
	fi
}

next() {
	counter=$(get_history_count)
	if [[ $counter -gt 0 ]]; then
		((counter--))
		echo "$counter" >"$store_history_counter"
	fi
}

previous() {
	counter=$(get_history_count)
	if [[ $counter -lt $(sed -n '$=' "$gh_find_code_history") ]]; then
		((counter++))
		echo "$counter" >"$store_history_counter"
	fi
}

view_history_commands() {
	counter=$(get_history_count)
	if [ -s "$gh_find_code_history" ]; then
		header_info=$(printf "%s (%s/%s) │ sort desc (↓) │ ^n (next) / ^p (previous)" \
			"${gh_find_code_history##*/}" "$counter" "$(sed -n '$=' "$gh_find_code_history")")
		command bat --color=always \
			--highlight-line="$counter" \
			--terminal-width="${FZF_PREVIEW_COLUMNS:-$COLUMNS}" \
			--file-name="$header_info" \
			--style=numbers,header-filename,grid <<<"$(tail -r "$gh_find_code_history")"
	else
		echo 'No history entries yet. Check back on your next run.'
	fi
}

# ===================== lets begin ========================

# The ':;' in ':;view_contents \{}' is necessary for the 'ctrl-h' toggle. If not included, nothing
# would be displayed. The reason for this is not yet understood.
: | command fzf \
	--ansi \
	--bind $'start:execute-silent(echo ${PPID-} > $store_ppid ;echo $FZF_PORT > $store_fzf_port)+reload:gh_query {fzf:query}' \
	--bind "change:first+reload:sleep 0.5; gh_query {fzf:query}" \
	--bind 'ctrl-b:execute-silent:gh browse --repo {4} {5}:{1}' \
	--bind "ctrl-h:transform:[[ ! \$FZF_PROMPT =~ History ]] &&
		echo 'change-prompt(History: )+change-preview(view_history_commands)+change-preview-window:~0:+1' ||
		echo 'change-prompt($fzf_prompt)+change-preview(:;view_contents \{})+change-preview-window:+\{1}+3/3'" \
	--bind "ctrl-n:execute-silent(next)+refresh-preview+next-history" \
	--bind "ctrl-p:execute-silent(previous)+refresh-preview+prev-history" \
	--bind 'ctrl-o:execute:[[ -n {fzf:query} && -n {} ]] && open_in_editor=true view_contents {}' \
	--bind 'ctrl-r:reload:gh_user_limit=100;gh_query {fzf:query}' \
	--bind "ctrl-t:transform:[[ ! \$FZF_PROMPT == \"$fzf_prompt\" ]] &&
		echo 'rebind(change)+change-prompt($fzf_prompt)+disable-search+transform-query:echo \{fzf:query} > $store_fuzzy_search_string; cat $store_search_string' ||
		echo 'unbind(change)+change-prompt($fzf_prompt_fuzzy)+enable-search+transform-query:echo \{fzf:query} > $store_search_string; cat $store_fuzzy_search_string'" \
	--bind 'ctrl-x:execute-silent:open_query_in_browser {fzf:query}' \
	--bind 'enter:execute:[[ -n {fzf:query} && -n {} ]] && open_in_pager=true view_contents {}' \
	--bind 'esc:become:' \
	--bind 'scroll-up:offset-up,scroll-down:offset-down' \
	--bind "tab:change-prompt($fzf_prompt)+change-preview(view_contents {})+change-preview-window:hidden:<70(hidden)|+{1}+3/3" \
	--bind "?:transform:[[ ! \$FZF_PROMPT =~ Help ]] &&
		echo 'change-prompt(Help: )+change-preview(print_help_text)+change-preview-window:~0:+1' ||
		echo 'change-prompt($fzf_prompt)+change-preview(:;view_contents \{})+change-preview-window:+\{1}+3/3'" \
	--border block \
	--color 'bg+:233,bg:235,gutter:235,border:238,scrollbar:235' \
	--color 'preview-bg:234,preview-border:236,preview-scrollbar:237' \
	--color 'fg+:255,fg:regular:250,hl:40,hl+:40' \
	--color 'pointer:9,spinner:92,marker:46' \
	--color 'prompt:14,info:40,header:255:regular,label:bold' \
	--delimiter '\t|\s\s+' \
	--disabled \
	--ellipsis '' \
	--height=100% \
	--header-lines 0 \
	--history "$gh_find_code_history" \
	--history-size 100 \
	--info hidden \
	--layout reverse \
	--listen \
	--no-multi \
	--nth=2..,.. \
	--pointer '▶' \
	--preview $'([[ $FZF_PROMPT =~ Help ]] && print_help_text) || ([[ $FZF_PROMPT =~ History ]] && view_history_commands) || view_contents {}' \
	--preview-window 'border-block:~3:+{1}+3/3:nohidden:right:nowrap:65%:<70(bottom:75%)' \
	--prompt "$fzf_prompt" \
	--query "$*" \
	--scroll-off 3 \
	--scrollbar '│▐' \
	--separator '' \
	--unicode \
	--with-nth=3..
